/*
 * Copyright 2018, TeamDev. All rights reserved.
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

buildscript {

    // Applying from `ext.gradle` inside the `buildscript` section to reuse the properties.
    //
    // As long as `buildscript` section is always evaluated first, we need to apply
    // `ext.gradle` explicitly here.
    apply from: 'ext.gradle'

    repositories {
        // Snapshots of Guava.
        maven { url = sonatypeSnapshots }

        jcenter()
        
        maven { url = googleMavenCentralMirror }

        // Repository for error-prone plugin.
        maven { url = gradlePlugins }

        mavenCentral()
        mavenLocal()

        // Spine releases repository.
        maven { url = spineRepository }

        // Spine snapshots repository.
        maven { url = spineSnapshotsRepository }
    }

    dependencies {
        classpath group: 'com.google.guava',
                  name: 'guava',
                  version: guavaVersion,
                  changing: true
        classpath ("net.ltgt.gradle:gradle-errorprone-plugin:$errorPronePluginVersion") {
            exclude group: 'com.google.guava'
        }
        classpath("com.google.protobuf:protobuf-gradle-plugin:$protobufGradlePluginVersion") {
            // exclude an old Guava version
            exclude group: 'com.google.guava'
        }
        classpath ("io.spine.tools:spine-model-compiler:$spineBaseVersion") {
            exclude group: 'com.google.guava'
        }
        /* Uncomment the below statement if you want the dependency to be fetched on each build.
           Please note that offline builds will not be available then. */
                                             //, changing: true

        classpath ("io.spine.tools:spine-gcloud-storage:$spineBaseVersion") {
            exclude group: 'com.google.guava'
        }
    }

    configurations.all({
        resolutionStrategy {
            cacheChangingModulesFor(0, 'seconds')
            force "com.google.guava:guava:$guavaVersion"
            force "com.google.guava:guava-testlib:$guavaVersion"
        }
    })
}

apply from: 'ext.gradle'

ext {
    protobufDependency = "com.google.protobuf:protoc:${protobufVersion}"
    spineGcsPlugin = 'io.spine.tools.gcs-plugin'
    spineJacocoScript = "${rootDir}/scripts/jacoco.gradle"
    spineProtobufPluginId = 'io.spine.tools.spine-model-compiler'

    credentialsPropertyFile = 'credentials.properties'
    publishPlugin = "$rootDir/scripts/publish.gradle"
    projectsToPublish = ["core",
                         "client",
                         "server",
                         "testutil-core",
                         "testutil-client",
                         "testutil-server",
                         "model-assembler",
                         "model-verifier"]
}

allprojects {
    apply plugin: 'maven'
    apply plugin: 'jacoco'
    apply plugin: 'idea'
    apply plugin: 'project-report'

    group = 'io.spine'
    version = spineVersion
}

final boolean isTravis = System.env.TRAVIS == 'true'

/**
 * Determines whether the given {@code project} should expose its Javadoc to
 * SpineEventEngine.github.io website.
 *
 * <p>Currently, the {@code testutil} projects are excluded from publishing, as well as the modules
 * that perform the model compile-time checks.
 *
 * @param project the project to check
 * @return {@code true} is the project Javadoc should be published, {@code false} otherwise
 */
static boolean shouldPublishJavadoc(final Project project) {
    return !project.name.startsWith('testutil') && !project.name.startsWith("model")
}

subprojects {

    configurations {
        // Avoid collisions of Java classes defined both in `protobuf-lite` and `protobuf-java`
        runtime.exclude group: "com.google.protobuf", module: "protobuf-lite"
        testRuntime.exclude group: "com.google.protobuf", module: "protobuf-lite"
    }

    project.ext {
        sourcesRootDir = "$projectDir/src"
        generatedRootDir = "$projectDir/generated"

        generatedJavaDir = "$generatedRootDir/main/java"
        generatedTestJavaDir = "$generatedRootDir/test/java"

        generatedGrpcDir = "$generatedRootDir/main/grpc"
        generatedTestGrpcDir = "$generatedRootDir/test/grpc"

        generatedSpineDir = "$generatedRootDir/main/spine"
        generatedTestSpineDir = "$generatedRootDir/test/spine"

        testArtifactsScript = "${rootDir}/scripts/test-artifacts.gradle"
        generateDescriptorSetScript = "${rootDir}/scripts/generate-descriptor-set.gradle"
        filterInternalJavadocsScript = "${rootDir}/scripts/no-internal-javadoc.gradle"
        gRpcScript = "${rootDir}/scripts/grpc.gradle"
        updateDocsPlugin = "$rootDir/scripts/update-gh-pages.gradle"
    }

    apply plugin: 'com.google.protobuf'
    apply plugin: 'java'
    apply plugin: 'net.ltgt.errorprone'

    // Specific setup for a Travis build,
    // which prevents appearing of warning messages in build logs.
    //
    // It is expected that warnings are viewed and analyzed in the local build logs.
    if (isTravis) {
        javadoc {

            // Set the maximum number of Javadoc warnings to print.
            //
            // If the parameter value is zero, all warnings will be printed.
            options.addStringOption('Xmaxwarns', '1')
        }
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    // Set Java home to point to JDK8 in gradle.properties file.
    //
    // For Mac OS X, it looks like this:
    //
    // # suppress inspection "UnusedProperty"
    // org.gradle.java.home=/Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Contents/Home/

    repositories {
        // Snapshots of Guava.
        maven { url = sonatypeSnapshots }
        jcenter()
        maven { url = googleMavenCentralMirror }
        mavenCentral()
        mavenLocal()
        maven { url = spineRepository }
        maven { url = spineSnapshotsRepository }
    }

    dependencies {
        compile group: 'com.google.guava',
                name: 'guava',
                version: guavaVersion,
                changing: true

        //TODO:2018-05-11:alexander.yevsyukov: Replace the below with Checker Framework
        // after Guava fully migrates from it too.
        compile "com.google.code.findbugs:jsr305:3.0.0"

        compile "org.checkerframework:checker-qual:$checkerFrameworkVersion"
        compile "com.google.errorprone:error_prone_annotations:$errorProneVersion"

        //As a Library, we provide logging facade API, not specific logger bindings.
        //Target apps are free to use any binding they need.
        compile "org.slf4j:slf4j-api:$slf4JVersion"

        compile ("com.google.protobuf:protobuf-java:$protobufVersion") {
            exclude group: 'com.google.guava'
        }
        compile ("com.google.protobuf:protobuf-java-util:$protobufVersion") {
            exclude group: 'com.google.guava'
        }

        //Use jdk14 bindings for test purposes only.
        testCompile "org.slf4j:slf4j-jdk14:$slf4JVersion"
        testCompile "org.hamcrest:hamcrest-all:1.3"
        testCompile "org.mockito:mockito-core:$mockitoVersion"
        testCompile group: 'com.google.guava',
                    name: 'guava-testlib',
                    version: guavaVersion,
                    changing: true
        testCompile "org.junit.jupiter:junit-jupiter-api:$jUnitVersion"
        testRuntime "org.junit.jupiter:junit-jupiter-engine:$jUnitVersion"
        testRuntime "org.junit.vintage:junit-vintage-engine:$jUnitVersion"
    }

    sourceSets {
        main {
            proto.srcDirs = ["$sourcesRootDir/main/proto"]
            java.srcDirs = [generatedJavaDir,
                            "$sourcesRootDir/main/java",
                            generatedSpineDir]
            resources.srcDirs = ["$generatedRootDir/main/resources"]
        }
        test {
            proto.srcDirs = ["$sourcesRootDir/test/proto"]
            java.srcDirs = [generatedTestJavaDir,
                            "$sourcesRootDir/test/java",
                            generatedTestSpineDir]
            resources.srcDirs = ["$generatedRootDir/test/resources"]
        }
    }

    /* Uncomment this block if you need to display console output during the Gradle build.*/
    test {
        useJUnitPlatform {
            includeEngines 'junit-jupiter', 'junit-vintage'
        }

        testLogging {
            // Make sure output from standard out or error is shown in Gradle output.
            showStandardStreams = false

            // Or we use events method:
            // events 'standard_out', 'standard_error'

            // Or set property events:
            // events = ['standard_out', 'standard_error']

            // Instead of string values we can
            // use enum values:
            // events org.gradle.api.tasks.testing.logging.TestLogEvent.STANDARD_OUT,
            //        org.gradle.api.tasks.testing.logging.TestLogEvent.STANDARD_ERROR,
        }
    }

    protobuf {
        // The below suppressions `GroovyAssignabilityCheck` is a workaround for the IDEA bug.
        // See: https://youtrack.jetbrains.com/issue/IDEA-141744
        //noinspection GroovyAssignabilityCheck
        plugins {
            grpc {
                artifact = "io.grpc:protoc-gen-grpc-java:$gRpcVersion"
            }
        }
        generatedFilesBaseDir = generatedRootDir
        protoc {
            artifact = protobufDependency
        }

        // The below code removes deprecation annotations from the code generated by
        // Protobuf compiler.
        // See details at the link below:
        //    https://github.com/google/protobuf/issues/2054
        generateProtoTasks {
            all().each { final task ->
                task.descriptorSetOptions.includeSourceInfo = true
                task.doLast {
                    ant.replaceregexp(
                            match:'@java.lang.Deprecated|@deprecated',
                            replace:'',
                            flags:'g',
                            byline:true
                    ) {
                        fileset(dir: "${protobuf.generatedFilesBaseDir}/main/java")

                        final generatedTests = "${protobuf.generatedFilesBaseDir}/test/java"
                        if (new File(generatedTests).exists()) {
                            fileset(dir: generatedTests)
                        }
                    }
                }
            }
        }
    }

    javadoc {
        source = sourceSets.main.allJava
    }

    tasks.withType(JavaCompile) {
        // Exclude generated sources from being analyzed by Error Prone.
        options.compilerArgs += [
                '-XepExcludedPaths:.*/generated/.*'
        ]
    }
    
    task sourceJar(type: Jar) {
        from sourceSets.main.allJava
        classifier "sources"
    }

    task testOutputJar(type: Jar) {
        from sourceSets.test.output
        classifier "test"
    }

    task javadocJar(type: Jar, dependsOn: 'javadoc') {
        from ("$projectDir/build/docs/javadoc")
        classifier "javadoc"
    }

    // Apply the same IDEA module configuration for each of sub-projects.
    idea {
        module {
            generatedSourceDirs += file(generatedJavaDir)
            testSourceDirs += file(generatedTestJavaDir)
            downloadJavadoc = true
            downloadSources = true

            iml {
                beforeMerged { final module ->
                    module.dependencies.clear()
                }
                whenMerged { final module ->
                    module.dependencies*.exported = true
                }
            }
        }
    }

    // Apply the Javadoc publishing plugin.
    // This plugin *must* be applied here, not in the module `build.gradle` files.
    //
    if (shouldPublishJavadoc(project)) {
        apply from: updateDocsPlugin
    }
}

// IDEA project configuration.
idea {
    project {
        ipr {
            beforeMerged { final project ->
                project.modulePaths.clear()
            }
            withXml { final provider ->
                provider.node.component
                        .find { it.@name == 'VcsDirectoryMappings' }
                        .mapping.@vcs = 'Git'
            }
        }
    }
}
// Aggregated coverage report across all subprojects.
apply from: spineJacocoScript

apply from: publishPlugin
