/*
 * Copyright 2019, TeamDev. All rights reserved.
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
syntax = "proto3";

package spine.test.event.enrichment;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option java_package="io.spine.test.event.enrichment";
option java_multiple_files = true;

import "spine/time/time.proto";
import "spine/people/person_name.proto";

message ProjectCreatedEnrichmentAnotherPackage {
    option (enrichment_for) = "spine.test.event.ProjectCreated";

    string project_name = 1 [(by) = "project_id"];
}

//TODO:2019-02-07:alexander.yevsyukov: Remove this type. It used to have type reference in (by) only.
message ProjectCreatedEnrichmentAnotherPackageFqn {
    option (enrichment_for) = "spine.test.event.ProjectCreated";

    string project_name = 1 [(by) = "project_id"];
}

//TODO:2019-02-07:alexander.yevsyukov: Remove this type. It used to combine types from `enrichment_for` and `by`.
message ProjectCreatedEnrichmentAnotherPackageFqnAndMsgOpt {
    option (enrichment_for) = "spine.test.event.ProjectCreated";

    string project_name = 1 [(by) = "project_id"];
}

// The enrichment for all the events declared in the "spine.test.event.user" package.
//
// See `EnrichmentMapTest` for details.
//
message UserPackageEventsEnrichment {
    option (enrichment_for) = "spine.test.event.user.*";

    spine.time.ZoneOffset time_zone = 1 [(by) = "user_uid"];
}

// The enrichment for all the event declared in "spine.test.event.user.permission" package and
// referencing user who is able to grant permissions.
//
// See `LinkerTest.failIfEnrichmentNotDeclared()`.
//
message GranterEventsEnrichment {
    option (enrichment_for) = "spine.test.event.user.permission.*";

    spine.people.PersonName granter_name = 1 [(by) = "granter_uid"];
}

// The enrichment for all the events declared in the "spine.test.event.user" package and
// for spine.test.event.user.UserLoggedInEvent.
//
// See `EnrichmentMapTest` for details.
//
message SelectiveComplexEnrichment {
    option (enrichment_for) =
           "spine.test.event.user.permission.*,"
           "spine.test.event.user.UserLoggedInEvent";

    int32 security_warn = 1 [(by) = "user_uid"];
}

// The enrichment for all the events declared in the "spine.test.event.user.permission" and
// "spine.test.event.user.sharing" packages.
//
// See `EnrichmentMapTest` for details.
//
message MultiplePackageEnrichment {
    option (enrichment_for) =
           "spine.test.event.user.permission.*,"
           "spine.test.event.user.sharing.*";

    int32 sharing_type = 1[(by) = "user_uid"];
}

message EnrichmentBoundWithFieldsWithDifferentNames {
    option (enrichment_for) =
           "spine.test.event.user.sharing.SharingRequestApproved,"
           "spine.test.event.user.permission.PermissionGrantedEvent";

    int32 user_google_uid = 1 [(by) = "second_user_uid | user_uid"];
}

//TODO:2019-02-07:alexander.yevsyukov: Rename this type. It no longer does what it's named after.
message EnrichmentBoundThoughFieldFqnWithFieldsWithDifferentNames {
    option (enrichment_for) =
        "spine.test.event.user.sharing.SharingRequestApproved,"
        "spine.test.event.user.permission.PermissionGrantedEvent";
    int32 user_google_uid = 1
        [(by) = "second_user_uid|user_uid"];
}

message EnrichmentBoundWithFieldsWithDifferentNamesOfWildcardTypes {
    option (enrichment_for) =
           "spine.test.event.user.sharing.SharingRequestApproved,"
           "spine.test.event.user.permission.*";

    int32 user_google_uid = 1 [(by) = "SharingRequestApproved.second_user_uid|user_uid"];
}

message EnrichmentBoundWithMultipleFieldsWithDifferentNames {
    option (enrichment_for) =
            "spine.test.event.user.sharing.SharingRequestApproved,"
            "spine.test.event.user.permission.PermissionGrantedEvent,"
            "spine.test.event.user.UserDeletedEvent";

    int32 user_google_uid = 1 [(by) = "second_user_uid | user_uid | deleted_uid"];
}

message EnrichmentBoundWithFieldsSeparatedWithSpaces {
    option (enrichment_for) =
        "spine.test.event.TaskAdded,"
        "spine.test.event.user.permission.PermissionGrantedEvent";

    string user_google_uid = 1 [(by) = "  project_id   | user_uid "];
}
