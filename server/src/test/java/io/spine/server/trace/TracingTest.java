/*
 * Copyright 2019, TeamDev. All rights reserved.
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package io.spine.server.trace;

import io.spine.base.CommandMessage;
import io.spine.core.Command;
import io.spine.server.BoundedContext;
import io.spine.server.trace.given.MemoizingTracer;
import io.spine.server.trace.given.MemoizingTracerFactory;
import io.spine.server.trace.given.airport.AirportContext;
import io.spine.test.trace.BoardingCanceled;
import io.spine.test.trace.BoardingStarted;
import io.spine.test.trace.CancelBoarding;
import io.spine.test.trace.CancelFlight;
import io.spine.test.trace.FlightCanceled;
import io.spine.test.trace.FlightScheduled;
import io.spine.test.trace.ScheduleFlight;
import io.spine.testing.client.TestActorRequestFactory;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import static io.spine.grpc.StreamObservers.noOpObserver;
import static io.spine.server.trace.given.TracingTestEnv.BOARDING_TYPE;
import static io.spine.server.trace.given.TracingTestEnv.FLIGHT;
import static io.spine.server.trace.given.TracingTestEnv.FLIGHT_TYPE;
import static io.spine.server.trace.given.TracingTestEnv.FROM;
import static io.spine.server.trace.given.TracingTestEnv.TIMETABLE_TYPE;
import static io.spine.server.trace.given.TracingTestEnv.cancelFlight;
import static io.spine.server.trace.given.TracingTestEnv.scheduleFlight;
import static org.junit.jupiter.api.Assertions.assertTrue;

@DisplayName("Message tracing should")
class TracingTest {

    private static final TestActorRequestFactory requests =
            new TestActorRequestFactory(TracingTest.class);

    private MemoizingTracerFactory tracing;
    private BoundedContext context;

    @BeforeEach
    void setUp() {
        tracing = new MemoizingTracerFactory();
        context = AirportContext
                .builder()
                .setTracerFactorySupplier(spec -> tracing)
                .build();
    }

    @Test
    @DisplayName("trace actor commands")
    void traceCommands() {
        post(scheduleFlight());
        MemoizingTracer tracer = tracing.tracer(ScheduleFlight.class);
        assertTrue(tracer.isReceiver(FLIGHT, FLIGHT_TYPE));
    }

    @Test
    @DisplayName("trace many messages generated by a single actor message")
    void traceComplexMessageTrees() {
        post(scheduleFlight());
        tracing.tracer(ScheduleFlight.class).isReceiver(FLIGHT, FLIGHT_TYPE);
        tracing.tracer(FlightScheduled.class).isReceiver(FROM, TIMETABLE_TYPE);
        tracing.tracer(FlightScheduled.class).isReceiver(FLIGHT, BOARDING_TYPE);
        tracing.tracer(BoardingStarted.class).isReceiver(FLIGHT, BOARDING_TYPE);
        tracing.tracer(BoardingStarted.class).isReceiver(FLIGHT, BOARDING_TYPE);

        post(cancelFlight());
        tracing.tracer(CancelFlight.class).isReceiver(FLIGHT, FLIGHT_TYPE);
        tracing.tracer(FlightCanceled.class).isReceiver(FROM, TIMETABLE_TYPE);
        tracing.tracer(FlightCanceled.class).isReceiver(FLIGHT, BOARDING_TYPE);
        tracing.tracer(CancelBoarding.class).isReceiver(FLIGHT, BOARDING_TYPE);
        tracing.tracer(BoardingCanceled.class).isReceiver(FLIGHT, BOARDING_TYPE);
    }

    private void post(CommandMessage command) {
        Command cmd = requests.command()
                              .create(command);
        context.commandBus()
               .post(cmd, noOpObserver());
    }
}
