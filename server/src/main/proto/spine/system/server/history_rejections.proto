/*
 * Copyright 2019, TeamDev. All rights reserved.
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

syntax = "proto3";

package spine.system.server;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option (internal_all) = true;

option java_package = "io.spine.system.server.rejection";
option java_outer_classname = "HistoryRejections";

import "google/protobuf/timestamp.proto";

import "spine/core/event.proto";
import "spine/core/command.proto";
import "spine/system/server/entity_history.proto";

// A rejection to dispatch a duplicate event to an entity.
//
message CannotDispatchEventTwice {

    // The receiver of the event.
    EntityHistoryId receiver = 1 [(validate) = true];

    // The duplicate event.
    core.Event payload = 2 [(validate) = true];

    // The time when the event was dispatched.
    //
    // This timestamp may differ from the one in the context of the event, since the time of
    // dispatching may not be the same as the time of creation.
    //
    google.protobuf.Timestamp when_dispatched = 3 [(required) = true];
}

// A rejection to dispatch a duplicate command to an entity.
//
message CannotDispatchCommandTwice {

    // The receiver of the command.
    EntityHistoryId receiver = 1 [(validate) = true];

    // The duplicate command.
    core.Command payload = 2 [(validate) = true];

    // The time when the event was dispatched.
    //
    // This timestamp may differ from the one in the context of the event, since the time of
    // dispatching may not be the same as the time of creation.
    //
    google.protobuf.Timestamp when_dispatched = 3 [(required) = true];
}
