syntax = "proto3";

package spine.system.server;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option (every_is).java_type = "DiagnosticEvent";
option java_package = "io.spine.system.server";
option java_outer_classname = "DiagnosticEventsProto";
option java_multiple_files = true;

import "spine/base/error.proto";
import "spine/core/command.proto";
import "spine/core/diagnostics.proto";
import "spine/core/event.proto";
import "spine/system/server/entity_type.proto";
import "spine/validate/validation_error.proto";

// An event emitted whenever an entity validation constraint is violated.
//
// None of the fields of this message is required, as we might not know something about
// the violation but should still be able to record it.
//
message ConstraintViolated {

    // The violated entity info.
    core.MessageId entity = 1 [(required) = false];

    // The last message handled by the entity.
    core.MessageId last_message = 2 [(required) = false];

    // The last message in the chain which produced the `last_message`.
    core.MessageId root_message = 3 [(required) = false];

    // The validation constraint violations.
    repeated validate.ConstraintViolation violation = 4 [(required) = false];
}

// An event emitted whenever a command is dispatched to an entity for the second time.
message CannotDispatchDuplicateCommand {
    option (is).java_type = "CannotDispatchDuplicate";

    core.MessageId entity = 1;

    // ID of the duplicate command.
    //
    // Deprecated: use `duplicate_command` instead.
    //
    core.CommandId command = 2 [deprecated = true];

    core.MessageId duplicate_command = 3;
}

// An event emitted whenever an event is dispatched to an entity for the second time.
message CannotDispatchDuplicateEvent {
    option (is).java_type = "CannotDispatchDuplicate";

    // The violated entity info.
    core.MessageId entity = 1;

    // ID of the duplicate event.
    //
    // Deprecated: use `duplicate_event` instead.
    //
    core.EventId event = 2 [deprecated = true];

    core.MessageId duplicate_event = 3;
}

// An event emitted whenever a handler method fails with a runtime exception.
message HandlerFailedUnexpectedly {

    core.MessageId entity = 1;

    // The handled signal ID.
    core.MessageId handled_signal = 2;

    // The error which occurred during the signal handling.
    base.Error error = 3;
}

// An event emitted whenever a runtime exception occurs during message routing.
message RoutingFailed {

    core.MessageId handled_signal = 1;

    EntityTypeName entity_type = 2;

    // The error which occurred during the routing.
    base.Error error = 3;
}

// An event emitted when an Aggregate cannot load its history due to an error while applying
// historical events.
//
// The event is emitted upon each attempt to load the Aggregate.
//
// An Aggregate with a corrupted history cannot handle new signals.
//
// The Aggregate state accessible to read side is undefined. It may reflect the state of the
// Aggregate after the last successful event, or may have advanced further, including changes caused
// by the erroneous event. An `EntityStateChanged` event must be emitted after the error is resolved
// to catch up the read-side on the valid Aggregate state.
//
// The error may take place some time after the erroneous event was emitted. In this case, there may
// be newer events in the Aggregate history. Those events cannot be applied to the Aggregate either.
// See `interrupted_events` for the number of such events.
//
// The framework does not provide a turn-key solution for resolving this kind of data corruption.
// Depending on the situation, there may be different approaches to the problem. Most common ones
// are:
//   - Change the logic in the event applier, so that a runtime error is not produced for the given
//     event.
//   - Manually change the event in the database. Note that the erroneous event may have been
//     propagated to other entities. Re-writing part of the system's history might lead to
//     inconsistent data.
//   - Manually delete the event in the database. Just like the previous approach, this is
//     a dangerous operation as the consequences of changing the history are unpredictable.
//
message AggregateHistoryCorrupted {

    // The Aggregate ID.
    core.MessageId entity = 1;

    // The type of the Aggregate.
    EntityTypeName entity_type = 2;

    // The ID of the last event which could be applied successfully.
    core.MessageId last_successful_event = 3;

    // The ID of the event which caused an error.
    core.MessageId erroneous_event = 4;

    // The error which occurred while applying the `erroneous_event`.
    base.Error error = 5;

    // Count of events which come after the `erroneous_event` in the Aggregate history.
    //
    // The events are not applied to the Aggregate when loading, i.e. applying for these events was
    // interrupted.
    uint32 interrupted_events = 6;
}
