//
// Copyright 2018, TeamDev. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

syntax = "proto3";

package spine.system.server;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option (internal_all) = true;

option java_package = "io.spine.system.server";
option java_outer_classname = "HistoryEventsProto";
option java_multiple_files = true;

import "google/protobuf/any.proto";

import "spine/client/entities.proto";
import "spine/system/server/entity_history.proto";

message EntityCreated {

    spine.client.EntityId id = 1 [(required) = true];

    EntityOption.Kind kind = 2 [(required) = true];
}

message EventDispatchedToSubscriber {

    spine.client.EntityId receiver = 1 [(required) = true];

    spine.system.server.DispatchedMessage payload = 2 [(required) = true, (valid) = true];
}

message EventDispatchedToReactor {

    spine.client.EntityId receiver = 1 [(required) = true];

    spine.system.server.DispatchedMessage payload = 2 [(required) = true, (valid) = true];
}

message EventDispatchedToApplier {

    spine.client.EntityId receiver = 1 [(required) = true];

    spine.system.server.DispatchedMessage payload = 2 [(required) = true, (valid) = true];
}

message CommandDispatchedToHandler {

    spine.client.EntityId receiver = 1 [(required) = true];

    spine.system.server.DispatchedMessage payload = 2 [(required) = true, (valid) = true];
}

message EntityStateChanged {

    spine.client.EntityId id = 1 [(required) = true];

    google.protobuf.Any new_state = 2 [(required) = true];

    google.protobuf.Any message_id = 3 [(required) = true];
}

message EntityArchived {

    spine.client.EntityId id = 1 [(required) = true];

    google.protobuf.Any message_id = 2 [(required) = true];
}

message EntityDeleted {

    spine.client.EntityId id = 1 [(required) = true];

    google.protobuf.Any message_id = 2 [(required) = true];
}

message EntityExtractedFromArchive {

    spine.client.EntityId id = 1 [(required) = true];

    google.protobuf.Any message_id = 2 [(required) = true];
}

message EntityRestored {

    spine.client.EntityId id = 1 [(required) = true];

    google.protobuf.Any message_id = 2 [(required) = true];
}
