//
// Copyright 2018, TeamDev. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

syntax = "proto3";

package spine.system.server;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option (internal_all) = true;

option java_package = "io.spine.system.server";
option java_outer_classname = "EntityHistoryProto";
option java_multiple_files = true;

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";

import "spine/core/command.proto";
import "spine/core/event.proto";
import "spine/client/entities.proto";
import "spine/server/entity/entity.proto";

// An identifier of an entity history.
//
message EntityHistoryId {

    // The ID of the entity.
    spine.client.EntityId entity_id = 1;

    // The type URL of the entity state.
    string type_url = 2;
}

// A history of interactions with an entity.
//
// Each Aggregate, Projection, and ProcessManager instance has a corresponding entity history.
//
// Stores the lists of all commands and events ever dispatched to the entity, represented by their
// IDs.
//
message EntityHistory {
    option (entity).kind = AGGREGATE;

    EntityHistoryId id = 1;

    // The kind of the entity.
    EntityOption.Kind kind = 2;

    // The history of lifecycle flags changes.
    LifecycleHistory lifecycle = 3;

    // The most recent time when the entity state has been changed.
    google.protobuf.Timestamp last_state_change = 4;

    // The history of messages dispatched to the entity.
    DispatchingHistory dispatching = 5;
}

// The history of an entity lifecycle.
//
// Contains the current `LifecycleFlags` and the timestamps of the instants when
// the lifecycle-changing mutations have occured to the entity for the most recent time.
//
// Since none of the lifecycle states is terminal, none of the fields are mutually exclusive.
//
message LifecycleHistory {

    // Current `LifecycleFlags` of the entity.
    spine.server.entity.LifecycleFlags lifecycle_flags = 1;

    // Instant when the entity was archived.
    //
    // If the entity has been archived for multiple times in its history, this timestamp represents
    // the most recent occurance.
    //
    google.protobuf.Timestamp when_archived = 2;

    // Instant when the entity was deleted.
    //
    // If the entity has been deleted for multiple times in its history, this timestamp represents
    // the most recent occurance.
    //
    google.protobuf.Timestamp when_deleted = 3;

    // Instant when the entity was extracted from archive.
    //
    // If the entity has been extracted for multiple times in its history, this timestamp represents
    // the most recent occurance.
    //
    google.protobuf.Timestamp when_extracted_from_archive = 4;

    // Instant when the entity was restored after deletion.
    //
    // If the entity has been restored for multiple times in its history, this timestamp represents
    // the most recent occurance.
    //
    google.protobuf.Timestamp when_restored = 5;
}

// The history of dispatching messages to the entity.
//
// Contains timestamps of most recent command and event dispatched to the entity.
//
message DispatchingHistory {

    // The most recent time when a command was dispatched to the entity.
    google.protobuf.Timestamp when_command = 1;

    // The most recent time when an event was dispatched to the entity.
    google.protobuf.Timestamp when_event = 2;
}

// A record of an event dispatched to a certain entity.
//
message DispatchedEvent {

    // The ID of the event.
    spine.core.EventId event = 1;

    // The time when the event was dispatched.
    //
    // This timestamp may differ from the one in the context of the event, since the time of
    // dispatching may not be the same as the time of creation.
    //
    google.protobuf.Timestamp when_dispatched = 2 [(required) = true];
}

// A record of a command dispatched to a certain entity.
//
message DispatchedCommand {

    // The ID of the command.
    spine.core.CommandId command = 1;

    // The time when the command was dispatched.
    //
    // This timestamp may differ from the one in the context of the event, since the time of
    // dispatching may not be the same as the time of creation.
    //
    google.protobuf.Timestamp when_dispatched = 2 [(required) = true];
}

// An identifier of a message dispatched to an entity.
//
// May represent either an event or a command.
//
message DispatchedMessageId {

    oneof kind {

        spine.core.CommandId command_id = 1;

        spine.core.EventId event_id = 2;
    }
}
