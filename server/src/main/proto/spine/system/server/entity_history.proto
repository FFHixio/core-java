//
// Copyright 2018, TeamDev. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

syntax = "proto3";

package spine.system.server;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option (internal_all) = true;

option java_package = "io.spine.system.server";
option java_outer_classname = "EntityHistoryProto";
option java_multiple_files = true;

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";

import "spine/core/command.proto";
import "spine/core/event.proto";
import "spine/client/entities.proto";

// An identifier of an entity history.
//
message EntityHistoryId {

    // The ID of the entity.
    spine.client.EntityId entity_id = 1;

    // The type URL of the entity state.
    string type_url = 2;
}

// A history of interactions with an entity.
//
// Each Aggregate, Projection, and ProcessManager instance has a corresponding entity history.
//
// Stores the lists of all commands and events ever dispatched to the entity, represented by their
// IDs.
//
message EntityHistory {
    option (entity).kind = AGGREGATE;

    EntityHistoryId id = 1;

    // The kind of the entity.
    EntityOption.Kind kind = 2;

    // All the commands ever dispatched to the entity.
    repeated DispatchedCommand commands = 3;

    // All the events ever dispatched to the entity.
    //
    // In case of Aggregates, this includes both the applied events of the aggregate itself and
    // the events dispatched to the reactor methods.
    //
    repeated DispatchedEvent events = 4;
}

// A record of an event dispatched to a certain entity.
//
message DispatchedEvent {

    // The ID of the event.
    spine.core.EventId event = 1;

    // The time when the event was dispatched.
    //
    // This timestamp may differ from the one in the context of the event.
    //
    google.protobuf.Timestamp when_dispatched = 2 [(required) = true];
}

// A record of a command dispatched to a certain entity.
//
message DispatchedCommand {

    // The ID of the command.
    spine.core.CommandId command = 1;

    // The time when the command was dispatched.
    //
    // This timestamp may differ from the one in the context of the event.
    //
    google.protobuf.Timestamp when_dispatched = 2 [(required) = true];
}

// An identifier of a message dispatched to an entity.
//
// May represent either an event or a command.
//
message DispatchedMessageId {

    oneof kind {

        spine.core.CommandId command_id = 1;

        spine.core.EventId event_id = 2;
    }
}
