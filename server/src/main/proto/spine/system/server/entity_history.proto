//
// Copyright 2018, TeamDev. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

syntax = "proto3";

package spine.system.server;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option (internal_all) = true;

option java_package = "io.spine.system.server";
option java_outer_classname = "EntityHistoryProto";
option java_multiple_files = true;

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";

import "spine/core/command.proto";
import "spine/core/event.proto";
import "spine/client/entities.proto";

message EntityHistoryId {

    spine.client.EntityId entity_id = 1;

    string type_url = 2;
}

message EntityHistory {
    option (entity).kind = AGGREGATE;

    EntityHistoryId id = 1;

    EntityOption.Kind kind = 2;

    repeated DispatchedCommand commands = 3;

    repeated DispatchedEvent events = 4;
}

message DispatchedEvent {

    spine.core.Event event = 1;

    google.protobuf.Timestamp when_dispatched = 2 [(required) = true];
}

message DispatchedCommand {

    spine.core.Command command = 1;

    google.protobuf.Timestamp when_dispatched = 2 [(required) = true];
}

message DispatchedMessageId {

    spine.core.CommandId command_id = 1;

    spine.core.EventId event_id = 2;
}
