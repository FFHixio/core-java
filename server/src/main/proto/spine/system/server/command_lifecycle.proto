//
// Copyright 2018, TeamDev. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

syntax = "proto3";

package spine.system.server;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option (internal_all) = true;

option java_package = "io.spine.system.server";
option java_outer_classname = "CommandLicecycleProto";
option java_multiple_files = true;

import "google/protobuf/timestamp.proto";

import "spine/core/command.proto";
import "spine/core/response.proto";
import "spine/client/entities.proto";

// The current status of a command in a system.
//
// All the commands in the system have a corresponding lifecycle instance. The only excpetion are
// the commads of the `System` bounded contexts, which do not have an explicit lifecycle.
//
message CommandLifecycle {

    // The ID of the command.
    spine.core.CommandId id = 1;

    // The command.
    spine.core.Command command = 2;

    // The ID of the command receiver entity.
    spine.client.EntityId receiver = 3;

    // The current status of the command.
    CommandStatus status = 4 [(required) = true];
}

// The status of the command processing.
//
message CommandStatus {

    // The instant when the command was received.
    //
    // Effectively, this is the time when the command is posted to the `CommandBus`.
    //
    google.protobuf.Timestamp when_received = 1;

    // The instant when the command is acknowledged by the `CommandBus`.
    google.protobuf.Timestamp when_acknowledged = 2;

    // The instant when the command is sent to a dispatcher.
    google.protobuf.Timestamp when_dispatched = 3;

    // The instant when the command processing is completed, successfully or otherwise.
    google.protobuf.Timestamp when_processed = 4 [(goes).with = "processing_status"];

    // The status of the command after processing.
    //
    // An empty field notifies a non-processed command.
    //
    spine.core.Status processing_status = 5 [(goes).with = "when_processed"];
}
