//
// Copyright 2018, TeamDev. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
syntax = "proto3";

package spine.server.delivery;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option (SPI_all) = true;
option java_package = "io.spine.server.delivery";
option java_multiple_files = true;
option java_outer_classname = "DeliveryProto";

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";


// An identifier of a consumer for `Delivery`.
//
// Used to match the target consumers for the envelope; especially helpful if the delivery
// is distributed across several nodes.
message ConsumerId {

    // Typically, the FQN for the consumer class.
    //
    // If the consumer is delegate, the FQN of the final destination class
    // is used as a part of this string.
    string consumer_identity = 1 [(required) = true];
}

// An identifier of the sharded message.
//
// This is a string representation of the original message ID. E.g. if the sharded message
// is an instance of `Command`, this is a stringified `CommandId` for that command instance.
//
// Such an approach is chosen in order to improve the readability of identifiers, when browsed
// via a management console, specific to the environment (e.g. Google PubSub management console).
//
message ShardedMessageId {

    string value = 1 [(required) = true];
}

// A message that has been rerouted to the specific shard.
//
// Messages travel to shards down the transport channels. This is a wrapper message, that
// holds the original message and the original target entity ID, as long as some
// utility data, required for the transport propagation.
message ShardedMessage {

    ShardedMessageId id = 1 [(required) = true, (valid) = true];

    google.protobuf.Any target_id = 2 [(required) = true];

    google.protobuf.Any original_message = 3 [(required) = true];

    google.protobuf.Timestamp when_sharded = 4 [(required) = true];
}

// An index of a shard.
//
// A value type used across the application. To be potentially used in JavaScript, Go, C++ and
// other client and server environments, that are split into shards.
message ShardIndex {

    // The zero-based index of the shard.
    int32 index = 1 [(min).value = "0"];

    // Total number of shards.
    int32 of_total = 2 [(min).value = "1"];
}
