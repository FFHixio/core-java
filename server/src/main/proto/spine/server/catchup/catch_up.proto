syntax = "proto3";

package spine.server.catchup;

import "spine/options.proto";
import "spine/time_options.proto";

option (type_url_prefix) = "type.spine.io";
option java_package = "io.spine.server.catchup";
option java_outer_classname = "CatchUpProto";
option java_multiple_files = true;

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";

import "spine/core/event.proto";

// A state of a catch-up process.
//
message CatchUp {
    option (entity).kind = PROCESS_MANAGER;

    CatchUpId id = 1;

    // A description of a catch-up requested.
    message Request {
        // A type URL of the projection under catch-up.
        string projection_type = 1 [(required) = true];

        // IDs of the projections under catch-up, packed as `Any`.
        repeated google.protobuf.Any target = 2;

        // Since which point in time the catch-up has been originally requested.
        //
        // This value is inclusive as for the timestamp of events to which this catch-up should
        // be applicable.
        //
        google.protobuf.Timestamp since_when = 3 [(required) = true, (when).in = PAST];

        // The type URLs of events to read from the Event Store.
        repeated string event_type = 4;
    }

    Request request = 2 [(required) = true, (validate) = true];

    // During the catch-up, this field holds the timestamp of the last event already processed.
    google.protobuf.Timestamp when_last_read = 5;

    // During the catch-up, this field records the ID of the last event already processed.
    spine.core.EventId last_read = 6;

    CatchUpStatus status = 7 [(required) = true];

    // The index of the current catch-up round.
    //
    // In each round the batch of the events is read from the Event Store and posted
    // to the respective `Inbox`es.
    //
    // The index of the first round is 0.
    //
    int32 current_round = 8;
}

// An ID of a catch-up process.
//
message CatchUpId {

    string uuid = 1;
}

enum CatchUpStatus {

    CUS_UNDEFINED = 0;

    STARTED = 1;

    FINALIZING = 2;

    COMPLETED = 3;
}
